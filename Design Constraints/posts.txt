url: /user/create
receives the following and creates a user in the server with random id: 
{
	username: <username>,
	email: <email>,
	password: <password>
}

url: /group/create
receives the following and creates a group in the server with random id. Adds the user id sent via parameter as admin and user:
{
	name: <groupname>,
	userid: <userid>
}

url: /group/<groupId>/admins/<id>
receives an id of a user and adds it to the admins. 
{
	groupId: <groupId>
	userId: <userId>
}

url: /group/<groupId>/users/<id>
receives an id of a user and adds it to the userlist of the group. 
{
	groupId: <groupId>
	userId: <userId>
}

url: /session/create
This post is done automatically by the server once the user logs in and sends it as date. A put is performed to close session. Receives:
{
	user: <userid>,
	startTime: <startTime>
}

url: /action/create
this action is performed after a user draws something on a canvas. receive:
{
	svg: <svgfile>,
	time: <timeWhenActionIsPerformed>
}

url: /canvas/create
First, this adds the autogenerated canvasId to the pertinent room's drawings vector of canvases. Receives the following:
{
	room: <roomid>,
	name: <canvasName>
}

url: /chat/create
initializes a particular chat if it doesn't exist for a room. Receives:
{
	roomid: <roomid>
}

url: /comment/create
creates a comment based on the username and a string. Receives
{
	comm: <comment>,
	user: <username>
}

url: /message/send
sends a message to a particular chat. Receives
{
	chat: <chatid>,
	msg: <message>,
	user: <username>,
	timestamp: <CurrentDate>
}

url: /room/create
initializes a room for a particular group with no canvases. receives:
{
	group:<groupid>
}